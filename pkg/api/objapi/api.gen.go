// Package objapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package objapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Object defines model for Object.
type Object struct {
	// Id Unique identifier for the object
	Id string `json:"id"`

	// Lat Latitude of the object
	Lat float64 `json:"lat"`

	// Lon Longitude of the object
	Lon float64 `json:"lon"`

	// Name Name of the object
	Name string `json:"name"`
}

// GetObjectsObjectIdDistanceParams defines parameters for GetObjectsObjectIdDistance.
type GetObjectsObjectIdDistanceParams struct {
	Lat float64 `form:"lat" json:"lat"`
	Lon float64 `form:"lon" json:"lon"`
}

// PostObjectsJSONRequestBody defines body for PostObjects for application/json ContentType.
type PostObjectsJSONRequestBody = Object

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetObjects request
	GetObjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostObjectsWithBody request with any body
	PostObjectsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostObjects(ctx context.Context, body PostObjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteObjectsObjectId request
	DeleteObjectsObjectId(ctx context.Context, objectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectsObjectId request
	GetObjectsObjectId(ctx context.Context, objectId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetObjectsObjectIdDistance request
	GetObjectsObjectIdDistance(ctx context.Context, objectId string, params *GetObjectsObjectIdDistanceParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetObjects(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjectsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostObjects(ctx context.Context, body PostObjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostObjectsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteObjectsObjectId(ctx context.Context, objectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteObjectsObjectIdRequest(c.Server, objectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectsObjectId(ctx context.Context, objectId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectsObjectIdRequest(c.Server, objectId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetObjectsObjectIdDistance(ctx context.Context, objectId string, params *GetObjectsObjectIdDistanceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetObjectsObjectIdDistanceRequest(c.Server, objectId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetObjectsRequest generates requests for GetObjects
func NewGetObjectsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/objects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostObjectsRequest calls the generic PostObjects builder with application/json body
func NewPostObjectsRequest(server string, body PostObjectsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostObjectsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostObjectsRequestWithBody generates requests for PostObjects with any type of body
func NewPostObjectsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/objects")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteObjectsObjectIdRequest generates requests for DeleteObjectsObjectId
func NewDeleteObjectsObjectIdRequest(server string, objectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/objects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObjectsObjectIdRequest generates requests for GetObjectsObjectId
func NewGetObjectsObjectIdRequest(server string, objectId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/objects/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetObjectsObjectIdDistanceRequest generates requests for GetObjectsObjectIdDistance
func NewGetObjectsObjectIdDistanceRequest(server string, objectId string, params *GetObjectsObjectIdDistanceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "objectId", runtime.ParamLocationPath, objectId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/objects/%s/distance", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lat", runtime.ParamLocationQuery, params.Lat); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lon", runtime.ParamLocationQuery, params.Lon); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetObjectsWithResponse request
	GetObjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetObjectsResponse, error)

	// PostObjectsWithBodyWithResponse request with any body
	PostObjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectsResponse, error)

	PostObjectsWithResponse(ctx context.Context, body PostObjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectsResponse, error)

	// DeleteObjectsObjectIdWithResponse request
	DeleteObjectsObjectIdWithResponse(ctx context.Context, objectId string, reqEditors ...RequestEditorFn) (*DeleteObjectsObjectIdResponse, error)

	// GetObjectsObjectIdWithResponse request
	GetObjectsObjectIdWithResponse(ctx context.Context, objectId string, reqEditors ...RequestEditorFn) (*GetObjectsObjectIdResponse, error)

	// GetObjectsObjectIdDistanceWithResponse request
	GetObjectsObjectIdDistanceWithResponse(ctx context.Context, objectId string, params *GetObjectsObjectIdDistanceParams, reqEditors ...RequestEditorFn) (*GetObjectsObjectIdDistanceResponse, error)
}

type GetObjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Object
}

// Status returns HTTPResponse.Status
func (r GetObjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostObjectsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostObjectsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostObjectsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteObjectsObjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteObjectsObjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteObjectsObjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectsObjectIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Object
}

// Status returns HTTPResponse.Status
func (r GetObjectsObjectIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectsObjectIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetObjectsObjectIdDistanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Distance Distance to the object in meters
		Distance *float64 `json:"distance,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r GetObjectsObjectIdDistanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetObjectsObjectIdDistanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetObjectsWithResponse request returning *GetObjectsResponse
func (c *ClientWithResponses) GetObjectsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetObjectsResponse, error) {
	rsp, err := c.GetObjects(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectsResponse(rsp)
}

// PostObjectsWithBodyWithResponse request with arbitrary body returning *PostObjectsResponse
func (c *ClientWithResponses) PostObjectsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostObjectsResponse, error) {
	rsp, err := c.PostObjectsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectsResponse(rsp)
}

func (c *ClientWithResponses) PostObjectsWithResponse(ctx context.Context, body PostObjectsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostObjectsResponse, error) {
	rsp, err := c.PostObjects(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostObjectsResponse(rsp)
}

// DeleteObjectsObjectIdWithResponse request returning *DeleteObjectsObjectIdResponse
func (c *ClientWithResponses) DeleteObjectsObjectIdWithResponse(ctx context.Context, objectId string, reqEditors ...RequestEditorFn) (*DeleteObjectsObjectIdResponse, error) {
	rsp, err := c.DeleteObjectsObjectId(ctx, objectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteObjectsObjectIdResponse(rsp)
}

// GetObjectsObjectIdWithResponse request returning *GetObjectsObjectIdResponse
func (c *ClientWithResponses) GetObjectsObjectIdWithResponse(ctx context.Context, objectId string, reqEditors ...RequestEditorFn) (*GetObjectsObjectIdResponse, error) {
	rsp, err := c.GetObjectsObjectId(ctx, objectId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectsObjectIdResponse(rsp)
}

// GetObjectsObjectIdDistanceWithResponse request returning *GetObjectsObjectIdDistanceResponse
func (c *ClientWithResponses) GetObjectsObjectIdDistanceWithResponse(ctx context.Context, objectId string, params *GetObjectsObjectIdDistanceParams, reqEditors ...RequestEditorFn) (*GetObjectsObjectIdDistanceResponse, error) {
	rsp, err := c.GetObjectsObjectIdDistance(ctx, objectId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetObjectsObjectIdDistanceResponse(rsp)
}

// ParseGetObjectsResponse parses an HTTP response from a GetObjectsWithResponse call
func ParseGetObjectsResponse(rsp *http.Response) (*GetObjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Object
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostObjectsResponse parses an HTTP response from a PostObjectsWithResponse call
func ParsePostObjectsResponse(rsp *http.Response) (*PostObjectsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostObjectsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteObjectsObjectIdResponse parses an HTTP response from a DeleteObjectsObjectIdWithResponse call
func ParseDeleteObjectsObjectIdResponse(rsp *http.Response) (*DeleteObjectsObjectIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteObjectsObjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetObjectsObjectIdResponse parses an HTTP response from a GetObjectsObjectIdWithResponse call
func ParseGetObjectsObjectIdResponse(rsp *http.Response) (*GetObjectsObjectIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectsObjectIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Object
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetObjectsObjectIdDistanceResponse parses an HTTP response from a GetObjectsObjectIdDistanceWithResponse call
func ParseGetObjectsObjectIdDistanceResponse(rsp *http.Response) (*GetObjectsObjectIdDistanceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetObjectsObjectIdDistanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Distance Distance to the object in meters
			Distance *float64 `json:"distance,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of all objects
	// (GET /objects)
	GetObjects(w http.ResponseWriter, r *http.Request)
	// Add a new object with coordinates
	// (POST /objects)
	PostObjects(w http.ResponseWriter, r *http.Request)
	// Delete a specific object
	// (DELETE /objects/{objectId})
	DeleteObjectsObjectId(w http.ResponseWriter, r *http.Request, objectId string)
	// Get details of a specific object
	// (GET /objects/{objectId})
	GetObjectsObjectId(w http.ResponseWriter, r *http.Request, objectId string)
	// Calculate distance to the object from current location
	// (GET /objects/{objectId}/distance)
	GetObjectsObjectIdDistance(w http.ResponseWriter, r *http.Request, objectId string, params GetObjectsObjectIdDistanceParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Get a list of all objects
// (GET /objects)
func (_ Unimplemented) GetObjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add a new object with coordinates
// (POST /objects)
func (_ Unimplemented) PostObjects(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a specific object
// (DELETE /objects/{objectId})
func (_ Unimplemented) DeleteObjectsObjectId(w http.ResponseWriter, r *http.Request, objectId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get details of a specific object
// (GET /objects/{objectId})
func (_ Unimplemented) GetObjectsObjectId(w http.ResponseWriter, r *http.Request, objectId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Calculate distance to the object from current location
// (GET /objects/{objectId}/distance)
func (_ Unimplemented) GetObjectsObjectIdDistance(w http.ResponseWriter, r *http.Request, objectId string, params GetObjectsObjectIdDistanceParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetObjects operation middleware
func (siw *ServerInterfaceWrapper) GetObjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjects(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostObjects operation middleware
func (siw *ServerInterfaceWrapper) PostObjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostObjects(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteObjectsObjectId operation middleware
func (siw *ServerInterfaceWrapper) DeleteObjectsObjectId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "objectId" -------------
	var objectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "objectId", runtime.ParamLocationPath, chi.URLParam(r, "objectId"), &objectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "objectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteObjectsObjectId(w, r, objectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetObjectsObjectId operation middleware
func (siw *ServerInterfaceWrapper) GetObjectsObjectId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "objectId" -------------
	var objectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "objectId", runtime.ParamLocationPath, chi.URLParam(r, "objectId"), &objectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "objectId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectsObjectId(w, r, objectId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetObjectsObjectIdDistance operation middleware
func (siw *ServerInterfaceWrapper) GetObjectsObjectIdDistance(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "objectId" -------------
	var objectId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "objectId", runtime.ParamLocationPath, chi.URLParam(r, "objectId"), &objectId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "objectId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetObjectsObjectIdDistanceParams

	// ------------- Required query parameter "lat" -------------

	if paramValue := r.URL.Query().Get("lat"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "lat"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "lat", r.URL.Query(), &params.Lat)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lat", Err: err})
		return
	}

	// ------------- Required query parameter "lon" -------------

	if paramValue := r.URL.Query().Get("lon"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "lon"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "lon", r.URL.Query(), &params.Lon)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "lon", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetObjectsObjectIdDistance(w, r, objectId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/objects", wrapper.GetObjects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/objects", wrapper.PostObjects)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/objects/{objectId}", wrapper.DeleteObjectsObjectId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/objects/{objectId}", wrapper.GetObjectsObjectId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/objects/{objectId}/distance", wrapper.GetObjectsObjectIdDistance)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RVT2/bPgz9KgJ/v6MRp9tOvnUrMAQo1gLDTkUPqkQnKmxJkegUQeDvPuiPkzpO0GxF",
	"sUsiyOQj+fgo7kCY1hqNmjxUO/BihS2Px7unZxQUTtYZi44Uxnslw69EL5yypIyGCn5pte6QKYmaVK3Q",
	"sdo4RitkJqEUQFuLUIEnp/QS+gIaTlOgW06KOonM1GP32rg2OIA03VODB0DdtU/oImBAmAAavfxrRM1b",
	"nEL+4O0U7ai8vgCH6045lFA9BM4yWqo7Jfu4d8swffBTujbToNf3i8hpyzVfKr3MkT3jWjLBG9E1nMK9",
	"VJ64FugZmZBiOwvZKWpCnNRTdmsED7jsJ7qNEsiu7xdQwAadT9GuZvPZPDBgLGpuFVTwOV4VYDmtog7K",
	"nEE4LzH2MsgkAi8kVPAd6S6bBDa8NdonCX2az8OfMJpQR09ubaNSUuWzT41MWoySI2yj4/8Oa6jgv/Kg",
	"2jJLtsx67fekcuf4NnF6xCVrlKfQwqGEYOO7tuVumxJnfG/Dm+ZgV4A1/kSt98aPil136Omrkds/qvOS",
	"8sbSItdhP2H3aqqf3HkuJcqjcq+lZJxpfMllshdFKyaMcVJpTpjoGdpd7tJhIfsUpUHCKSE38T5Tcpc9",
	"onwcb5HQeagedqBCbkFSw3wMsxCNx3UWr5g6HrfHCQdfznKQUj5mISXMOPMWhaqVGGa7L96S978ob/4h",
	"wjrDF3HVnBqS/CVOyZS306IphwfqgndjIPZmcPkwgosMte7QbQ9Y6a0+D/PmDjkLbPQ7gd8rifFSf92U",
	"sQgG7vM6Gd4IpVluQ3EJC6cW3TjOt7zDUO5X2Djkkf729mfMWe1My0TnHGpiTd54KbJHtxkU1LkGKlgR",
	"2aosuVWz5D44+LQhZ8K05eYK+sf+dwAAAP//JhtGVjMJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
